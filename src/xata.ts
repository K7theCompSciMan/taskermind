// Generated by Xata Codegen 0.29.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "user",
    columns: [
      { name: "username", type: "string" },
      { name: "password", type: "string" },
      { name: "email", type: "email", unique: true },
    ],
    revLinks: [{ column: "assignedUser", table: "task" }],
  },
  {
    name: "task",
    columns: [
      { name: "name", type: "string" },
      { name: "description", type: "text" },
      { name: "dueDate", type: "datetime" },
      { name: "priority", type: "string" },
      { name: "completed", type: "bool" },
      { name: "assignedUser", type: "link", link: { table: "user" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type Task = InferredTypes["task"];
export type TaskRecord = Task & XataRecord;

export type DatabaseSchema = {
  user: UserRecord;
  task: TaskRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://TaskerMind-uegtlp.us-east-1.xata.sh/db/api",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
